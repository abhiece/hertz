plugins {
    id 'org.springframework.boot' version '2.6.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
}

group = 'com.hertz'
version = "SNAPSHOT-1.0.0"
sourceCompatibility = '11'

repositories {
    mavenCentral()
    mavenLocal()
}

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationTest/java')
        resources.srcDir file('src/integrationTest/resources')
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

dependencies {
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    integrationTestCompileOnly 'org.projectlombok:lombok'
    integrationTestAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }
    integrationTestImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'junit', module: 'junit'
    }

    integrationTestImplementation('org.springframework.boot:spring-boot-starter-web') {
    }
}
    task integrationTest(type: Test, group: 'Verification') {
        useJUnitPlatform()
        description = 'Runs the integration tests'

        // option for overriding the application.yml properties
        systemProperties System.getProperties()

        if (systemProperties.containsKey('sleepSecsBeforeIntegrationTest')) {
            def sleep_val = systemProperties.get('sleepSecsBeforeIntegrationTest')
            println 'sleeping ' + sleep_val + ' seconds before running integration tests'
            sleep_val = sleep_val.toInteger() * 1000
            sleep(sleep_val as long)
        }

        testLogging {
            showStandardStreams = true
        }
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath + sourceSets.test.runtimeClasspath
        outputs.upToDateWhen { false }

        check.dependsOn integrationTest
        integrationTest.mustRunAfter test
    }

    test {
        useJUnitPlatform()
        testLogging {
            showStandardStreams = true
        }
    }

rootProject.tasks.named("processIntegrationTestResources") {
    duplicatesStrategy = 'include'
}

